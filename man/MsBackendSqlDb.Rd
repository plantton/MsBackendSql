% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MsBackendSqlDb-functions.R, R/MsBackendSqlDb.R
\name{MsBackendSqlDb}
\alias{MsBackendSqlDb}
\alias{class:MsBackendSqlDb}
\alias{MsBackendSqlDb-class}
\alias{backendInitialize,MsBackendSqlDb-method}
\title{SQL database based mass spectrometry data backend}
\usage{
MsBackendSqlDb()

\S4method{backendInitialize}{MsBackendSqlDb}(object, dbcon, files = character(), dbtable = "msdata")
}
\arguments{
\item{object}{a \code{MsBackendSqlDb} object.}

\item{dbcon}{a \code{DBIConnection} object to connect to the database.}

\item{files}{\code{character} with the file names from which data should be
imported. Only required if the database to which \code{dbcon} connects does
not already contain the data.}

\item{dbtable}{\code{character(1)} the name of the database table with the data.
Defaults to \code{dbtable = "msdata"}.}
}
\description{
The \code{MsBackendSqlDb} is an \link{MsBackend} backend which keeps all spectra data
(metadata as well as m/z and intensity values) in a single database table.
This object has a very low memory footprint because only primary keys of the
database table are stored within the object hence making it ideal for
representing very large mass spectrometry data sets on computers with limited
resources.
}
\section{Creating an \code{MsBackendSqlDb} instance}{


Like all \code{\link[=MsBackend]{MsBackend()}} objects, \code{MsBackendSqlDb} have to be \emph{initialized}
with the \code{backendInitialize} method that either fills the object with data
from mass spectrometry files provided with the \code{files} parameter or checks
if the pre-generated database contains all required data. A connection to
a database (with write access) has to be provided with the \code{dbcon} parameter
which expects a \code{DBIConnection} returned by a call to \code{\link[=dbConnect]{dbConnect()}}. To
fill the database with MS data files (usually mzML files, but all files
types supported by the \code{mzR} package are allowed), these have to be provided
with the \code{files} parameter. Parameter \code{dbtable} can be used to optionally
specify the database table name that contains, or should contain the data.
}

\section{Implementation notes}{


The \code{MsBackendSqlDb} defines the following slots which should not be
accessed or changed by the user, which can be retrieved by \code{getter}
functions:
\itemize{
\item \verb{@dbtable} (\code{character}): the name of the database table (or view)
containing the data.
\item \verb{@dbcon} (\code{DBIConnection}): the connection to the database.
\item \verb{@modCount} (\code{integer}): keeps track of each database writing cycle which
would invalidate objects pointing to the same database. This number has
to match between the database and the object.
\item \verb{@rows} (\code{integer}): the indices (primary keys) of the data.
\item \verb{@columns} (\code{character}): the names of the columns stored in the database.
}
}

\examples{

## Initialize an MsBackendSqlDb filling it with data from mzML files
library(msdata)
library(RSQLite)
con <- dbConnect(SQLite(), tempfile())
fls <- dir(system.file("sciex", package = "msdata"), full.names = TRUE,
    pattern = "mzML$")
msb <- backendInitialize(MsBackendSqlDb(), dbcon = con, files = fls)
}
\author{
Johannes Rainer, Chong Tang.
}
