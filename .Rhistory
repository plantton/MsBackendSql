library(MsBackendSql)
library(Spectra)
library(mzR)
library(RSQLite)
library(msdata)
library(peakRAM)
library(tidyverse)
library(pryr)
f <- msdata::proteomics(full.names = TRUE)[4]
conn1 <- dbConnect(SQLite(), "b1.db")
backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
test <- dbReadTable(conn1, 'msdata1')
insertValues <- rep("Test", 7534)
test <- dbReadTable(conn1, 'msdata')
dim(test)
dbListFields(conn1, 'msdata')  # list all columns names
data.frame(dataOrigin = insertValues)
rec <- peakRAM(dbExecute(conn1, "UPDATE msdata SET dataOrigin = :dataOrigin",
params = data.frame(dataOrigin = insertValues)))
rec
3776.198/60
b1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
b2 <- b1
b1$rtime
b1$rtime <- b1$rtime + 1
backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
names(test)
class(names(test))
names(test)[! names(test) %in% "mz"]
dbExecute(conn1,
"CREATE VIEW metaview1 AS SELECT ? FROM msdata",
params = names(test)[! names(test) %in% "mz"])
sql1 <- paste0("CREATE VIEW metaview1 AS SELECT ",
str1,
" FROM msdata")
str1 <- names(test)[! names(test) %in% "mz"]
sql1 <- paste0("CREATE VIEW metaview1 AS SELECT ",
str1,
" FROM msdata")
sql1
str1
toString(str1)
sql1 <- paste0("CREATE VIEW metaview1 AS SELECT ",
toString(str1),
" FROM msdata")
sql1
dbExecute(conn1, sql1)
dbListTables(conn1)
test_view <- dbReadTable(conn1, 'metaview1')
test_view <- dbReadTable(conn1, 'msdata')
rm(test_view)
## Drop View
dbExecute(conn1, "DROP VIEW IF EXISTS metaview1")
dbListTables(conn1)
test <- dbReadTable(conn1, 'msdata')
rm(test)
test <- dbReadTable(conn1, 'msdata')
backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
getwd()
conn1 <- dbConnect(SQLite(), "b1.db")
backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
rm(test)
gc()
test <- dbReadTable(conn1, 'msdata')
names(test)
str1 <- names(test)[! names(test) %in% "mz"]
str1
sql1 <- paste0("CREATE VIEW metaview1 AS SELECT ",
toString(str1),
" FROM msdata")
dbExecute(conn1, sql1)
dbListTables(conn1)
test_view <- dbReadTable(conn1, 'metaview1')
dbListFields(conn1, 'msdata')
dbListFields(conn1, 'metaview1')
## Drop View
dbExecute(conn1, "DROP VIEW IF EXISTS metaview1")
dbListTables(conn1)
## The View approach
str1 <- dbListFields(conn1, 'msdata')[!dbListFields(conn1, 'msdata') %in% "mz"]
str1
sql1 <- paste0("CREATE VIEW metaview1 AS SELECT ",
toString(str1),
" FROM msdata")
sql1
dbExecute(conn1, sql1)
dbListTables(conn1)
dbListFields(conn1, 'metaview1')
test_view <- dbReadTable(conn1, 'metaview1')
rm(test_view)
## Test on add column from list
newCol <- rep(33, 7534)
dbWriteTable(conn1, 'token', newCol)
dbWriteTable(conn1, 'token', as.data.frame(newCol))
dbListTables(conn1)
## Next step: drop msdata table
dbExecute(conn1, "DROP TABLE IF EXISTS msdata")
dbListTables(conn1)
test$X_pkey
dbListFields(conn1, 'msdata')
dbListFields(conn1, 'metaview1')
dbListTables()
dbListTables(conn1)
dbListFields(conn1, 'metaview1')
conn1 <- dbConnect(SQLite(), "b1.db")
backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
##
test <- dbReadTable(conn1, 'msdata')
insertValues <- rep("Test", 7534)
dbListFields(conn1, 'msdata')  # list all columns names
str1 <- dbListFields(conn1, 'msdata')[!dbListFields(conn1, 'msdata') %in% "mz"]
sql1 <- paste0("CREATE VIEW metaview1 AS SELECT ",
toString(str1),
" FROM msdata")
dbExecute(conn1, sql1)
dbListTables(conn1)
dbListFields(conn1, 'metaview1')
test_view <- dbReadTable(conn1, 'metaview1')
rm(test_view)
sql2 <- paste0("CREATE VIEW metakey AS SELECT ",
"_pkey",
" FROM msdata")
dbExecute(conn1, sql2)
test_pkey <- dbReadTable(conn1, 'metakey')
dbWriteTable(conn1, 'token', as.data.frame(newCol, test_pkey))
dbListTables(conn1)
dbExecute(conn1, "DROP TABLE IF EXISTS token")
dbListTables(conn1)
dim(as.data.frame(newCol, test_pkey))
dim(data.frame(newCol, test_pkey))
newtest  <- dim(data.frame(newCol, test_pkey))
View(newtest)
newtest  <- data.frame(newCol, test_pkey)
dbWriteTable(conn1, 'token', data.frame(newCol, test_pkey))
dbListTables(conn1)
dbListFields(conn1, 'metaview1')
dbListFields(conn1, 'token')
sql3 <- paste0("CREATE TABLE msdata1 AS ",
"(SELECT * FROM metaview1 INNER JOIN token on token.X_pkey = metaview1._pkey")
dbExecute(conn1, sql3)
sql3 <- paste0("CREATE TABLE msdata1 AS ",
"(SELECT * FROM metaview1 INNER JOIN token on token.X_pkey = metaview1._pkey)")
dbExecute(conn1, sql3)
sql3 <- paste0("CREATE TABLE msdata1 AS ",
"SELECT * FROM metaview1 INNER JOIN token on token.X_pkey = metaview1._pkey")
dbExecute(conn1, sql3)
dbListTables(conn1)
test1 <- dbReadTable(conn1, 'msdata1')
names(test1)
dbListFields(conn1, 'token')
dbListFields(conn1, 'msdata')
dbListFields(conn1, 'token')
View(data.frame(newCol, test_pkey))
test_pkey <- dbReadTable(conn1, '_pkey')
test_pkey <- dbReadTable(conn1, 'metakey')
View(test_pkey)
data.frame(newCol, _pkey = test_pkey)
data.frame(newCol, "_pkey" = test_pkey)
View(data.frame(newCol, "_pkey" = test_pkey))
dbExecute(conn1, "ALTER TABLE msdata RENAME TO _msdata_old")
dbListTables(conn1)
dbExecute(conn1, "ALTER TABLE msdata1 RENAME TO msdata")
dbListTables(conn1)
dbExecute(conn1, "DROP TABLE IF EXISTS _msdata_old")
dbListTables(conn1)
test1 <- dbReadTable(conn1, 'msdata')
dim(test1)
names(test1)
q()
library(MsBackendSql)
library(Spectra)
library(mzR)
library(RSQLite)
library(msdata)
library(peakRAM)
library(tidyverse)
library(pryr)
f <- msdata::proteomics(full.names = TRUE)[4]
conn1 <- dbConnect(SQLite(), "b1.db")
dbListFields(conn1, 'msdata')
dbListTables(conn1)
backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
str1 <- dbListFields(conn1, 'msdata')[!dbListFields(conn1, 'msdata') %in% "mz"]
sql1 <- paste0("CREATE VIEW metaview1 AS SELECT ",
toString(str1),
" FROM msdata")
dbExecute(conn1, sql1)
dbListFields(conn1, 'msdata')
!dbListFields(conn1, 'msdata') %in% "mz"
str1 <- dbListFields(conn1, 'msdata')[!dbListFields(conn1, 'msdata') %in% "mz"]
dbListTables(conn1)
rm(conn1)
getwd()
conn1 <- dbConnect(SQLite(), "b1.db")
backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
str1 <- dbListFields(conn1, 'msdata')[!dbListFields(conn1, 'msdata') %in% "mz"]
dbListTables(conn1)
sql1 <- paste0("CREATE VIEW metaview1 AS SELECT ",
toString(str1),
" FROM msdata")
dbExecute(conn1, sql1)
dbListTables(conn1)
newCol <- rep(33, 7534)
sql2 <- paste0("CREATE VIEW metakey AS SELECT ",
"_pkey",
" FROM msdata")
dbExecute(conn1, sql2)
dbListTables(conn1)
dbListFields(conn1, '_pkey')
dbListFields(conn1)
dbListTables(conn1)
dbListFields(conn1, 'metakey')
test_pkey <- dbReadTable(conn1, 'metakey')
View(test_pkey)
View(data.frame(newCol, _pkey = test_pkey))
dbWriteTable(conn1, 'token', data.frame(newCol, _pkey = test_pkey))
dbWriteTable(conn1, 'token', data.frame(newCol, pkey = test_pkey))
.replace_db_table_columns <- function(dbcon, pkey = "_pkey", column) {
str1 <- dbListFields(dbcon, dbtable)[!dbListFields(dbcon,
dbtable) %in% column]
sql1 <- paste0("CREATE VIEW metaview AS SELECT ",
toString(str1),
" FROM msdata")
dbExecute(dbcon, sql1)
sql2 <- paste0("CREATE VIEW metakey AS SELECT ",
"_pkey",
" FROM msdata")
dbExecute(dbcon, sql2)
metapkey <- dbReadTable(dbcon, 'metakey')
dbWriteTable(dbcon, 'token', data.frame(column, pkey = metapkey))
sql3 <- paste0("CREATE TABLE msdata1 AS ",
"SELECT * FROM metaview ",
"INNER JOIN token on token.X_pkey = metaview1._pkey")
dbExecute(dbcon, sql3)
dbExecute(dbcon, "ALTER TABLE msdata RENAME TO _msdata_old")
dbExecute(dbcon, "ALTER TABLE msdata1 RENAME TO msdata")
dbExecute(dbcon, "DROP TABLE IF EXISTS _msdata_old")
## Drop View
dbExecute(dbcon, "DROP VIEW IF EXISTS metaview1")
}
?dbClearResult
?dbSendQuery
test <- dbReadTable(conn1, 'msdata')
dim(test)
names(test)
str(mz)
str(test)
test_intensity <- test$intensity
is_blob <- which(vapply1l(test_intensity, is, "blob"))
library(MsBackendSql)
?vapply1l
is_blob <- which(vapply1l(test_intensity, is, "blob"))
library(MsCoreUtils)
is_blob <- which(vapply1l(test_intensity, is, "blob"))
table(is_blob)
test1 <- data.frame(column, intensity1 = test_intensity)
test1 <- data.frame(test_pkey, intensity1 = test_intensity)
View(test1)
dbWriteTable(conn1, 'token', data.frame(test_pkey, intensity1 = test_intensity))
## Drop View
dbExecute(dbcon, "DROP VIEW IF EXISTS token")
dbExecute(conn1, "DROP VIEW IF EXISTS token")
dbExecute(conn1, "DROP TABLE IF EXISTS token")
dbWriteTable(conn1, 'token', data.frame(test_pkey, intensity1 = test_intensity))
dbListTables(conn1)
test12 <- dbReadTable(conn1, 'token')
View(test12)
sql1 <- paste0("CREATE VIEW metaview AS SELECT ",
toString(str1),
" FROM msdata")
dbSendQuery(conn1, sql1)
?dbbind
library(DBI)
?dbbind
?dbBind
conn2 <- dbConnect(SQLite(), "b2.db")
backendInitialize(MsBackendSqlDb(), dbcon = conn2, files = f)
dbListFields(conn1, 'msdata')
list(dbListFields(conn1, 'msdata'))[!list(dbListFields(conn1, 'msdata')) %in% 'mz']
dbListTables(conn2)
test <- dbReadTable(conn2, 'msdata')
dim(test)
str1 <- dbListFields(conn1, 'msdata')[!dbListFields(conn1, 'msdata') %in% "mz"]
sql1 <- paste0("CREATE VIEW metaview1 AS SELECT ",
toString(str1),
" FROM msdata")
qrtest <- dbSendQuery(conn2, sql1)
dbListTables(conn2)
names(test)
within(names(test), rm(mz))
names(test)$mz
names(test)[names(test) != 'mz']
'mz' %in% names(test)
'mRz' %in% names(test)
conn1 <- dbConnect(SQLite(), "b1.db")
backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
str1 <- dbListFields(conn1, 'msdata')[!dbListFields(conn1, 'msdata') %in% "mz"]
sql1 <- paste0("CREATE VIEW metaview1 AS SELECT ",
toString(str1),
" FROM msdata")
dbExecute(conn1, sql1)
newCol <- rep(33, 7534)
sql2 <- paste0("CREATE VIEW metakey AS SELECT ",
"_pkey",
" FROM msdata")
dbExecute(conn1, sql2)
test_pkey <- dbReadTable(conn1, 'metakey')
dbWriteTable(conn1, 'token', data.frame(newCol, pkey = test_pkey))
sql3 <- paste0("CREATE TABLE msdata1 AS ",
"SELECT * FROM metaview1 INNER JOIN token on token.X_pkey = metaview1._pkey")
dbExecute(conn1, sql3)
dbListFields(conn1, 'msdata1')
## Next step: drop msdata table
dbExecute(conn1, "ALTER TABLE msdata RENAME TO _msdata_old")
dbExecute(conn1, "ALTER TABLE msdata1 RENAME TO msdata")
dbExecute(conn1, "DROP TABLE IF EXISTS _msdata_old")
## Drop View
dbExecute(conn1, "DROP VIEW IF EXISTS metaview1")
?validObject
2L + 2L
rm(list=ls())
library("devtools")
library("roxygen2")
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::document()
?callNextMethod
setwd("/media/chongtang/Windows/Users/tangc/Documents/rformassspectrometry/MsBackendSqlDIR/MsBackendSql")
devtools::document()
.valid_db_table_has_columns <- function(dbcon, dbtable, columns) {
tmp <- dbGetQuery(dbcon, paste0("select * from ", dbtable, " limit 3"))
if (!all(columns %in% colnames(tmp)))
return(paste0("columns ",
paste(columns[!columns %in% colnames(tmp)],
collapse = ", "), " not found in ", dbtable))
NULL
}
library(MsBackendSql)
library(Spectra)
library(mzR)
library(RSQLite)
library(msdata)
library(peakRAM)
library(tidyverse)
library(pryr)
##
conn1 <- dbConnect(SQLite(), "b1.db")
backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
f <- msdata::proteomics(full.names = TRUE)[4]
backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
dbListFields(conn1, 'msdata')  # list all columns names
.valid_db_table_has_columns <- function(dbcon, dbtable, columns) {
tmp <- dbGetQuery(dbcon, paste0("select * from ", dbtable, " limit 3"))
if (!all(columns %in% colnames(tmp)))
return(paste0("columns ",
paste(columns[!columns %in% colnames(tmp)],
collapse = ", "), " not found in ", dbtable))
NULL
}
.valid_db_table_has_columns(conn1, 'msdata')
.valid_db_table_has_columns(conn1, 'msdata', 'mz')
dbListTables(conn1)
.valid_db_table_has_columns(conn1, 'msdata', 'mz1')
.valid_db_table_has_columns(conn1, 'msdata', c('mz1', 'intensity')
)
.valid_db_table_has_columns(conn1, 'msdata', c('mz1', 'intensity1'))
.valid_db_table_has_columns(conn1, 'msdata', c('mz', 'intensity'))
is.null(.valid_db_table_has_columns(conn1, 'msdata', c('mz1', 'intensity1')))
.get_db_data <- function(object, columns = object@columns) {
qry <- dbSendQuery(object@dbcon,
paste0("select ", paste(columns, collapse = ","),
" from ", object@dbtable, " where _pkey = ?"))
qry <- dbBind(qry, list(object@rows))
res <- dbFetch(qry)
dbClearResult(qry)
is_blob <- which(vapply1l(res, is, "blob"))
for (i in is_blob)
res[[i]] <- lapply(res[[i]], unserialize)
if (ncol(res) == 1) {
if (any(c("mz", "intensity") %in% colnames(res)))
return(NumericList(res[[1]], compress = FALSE))
else return(res[[1]])
}
res <- DataFrame(res)
mzint <- which(colnames(res) %in% c("mz", "intensity"))
for (i in mzint)
res[[i]] <- NumericList(res[[i]])
res
}
devtools::document()
devtools::document()
methods(class = "MsBackendSqlDb")
library(MsBackendSqlDb)
library(devtools)
install_github('rformassspectrometry/MsBackendSql')
methods(class = "MsBackendSql")
library(MsBackendSql)
methods(class = "MsBackendSql")
args(getGeneric('show'))
args(getGeneric('$'))
q()
library("devtools")
library("roxygen2")
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
getwd()
setwd("/media/chongtang/Windows/Users/tangc/Documents/rformassspectrometry/MsBackendSqlDIR/MsBackendSql")
library(MsBackendSql)
setwd('/media/chongtang/Windows/Users/tangc/Documents/rformassspectrometry/temp')
library(MsBackendSql)
library(Spectra)
library(mzR)
library(RSQLite)
library(msdata)
library(peakRAM)
library(tidyverse)
library(pryr)
conn1 <- dbConnect(SQLite(), "b1.db")
f <- msdata::proteomics(full.names = TRUE)[4]
backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
sqlc <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
getwd()
str1 <- dbListFields(conn1, 'msdata')[!dbListFields(conn1, 'msdata') %in% "mz"]
sql1 <- paste0("CREATE VIEW metaview1 AS SELECT ",
toString(str1),
" FROM msdata")
dbExecute(conn1, sql1)
conn1 <- dbConnect(SQLite(), "b1.db")
sqlc <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
sqlc$
mz
test1 <- sqlc$mz
object_size(test1)
test2 <- sqlc$intensity
object_size(test2)
test2[[1]]
test3 <- sqlc$rtime
test3 <- sqlc$precursorMz
insert1 <- rep(1, 7534)
sqlc$mz <- insert1
length(sqlc$mz)
length(length1)
length(insert1)
qry <- dbSendQuery(conn1,
paste0("select ", paste('rtime', collapse = ","),
" from ", 'msdata', " where _pkey = ?"))
res <- dbFetch(qry)
rows1 <- seq(7534)
qry <- dbBind(qry, list(rows1))
res <- dbFetch(qry)
dim(res)
res[1:100]
res[1:100,1]
dbClearResult(qry)
library(MsCoreUtils)
is_blob <- which(vapply1l(res, is, "blob"))
table(is_blob)
ncol(res) == 1
any(c("mz", "intensity") %in% colnames(res))
res1 <- res[[1]]
res
res <- res[[1]]
res <- DataFrame(res)
mzint <- which(colnames(res) %in% c("mz", "intensity"))
dim(res)
mzint
test <- res[,1]
test3 <- sqlc$rtime
mzint <- which(colnames(res) %in% c("mz", "intensity"))
for (i in mzint)
res[[i]] <- NumericList(res[[i]])
dim(tes)
dim(res)
res
dim(res)
res[,1]
test <- res[,1]
test
test1 <- sqlc$mz
test1 <- sqlc$mz + 2
dim(ttest)
dim(test1)
test1[1:10]
test1 <- sqlc$mz + 5
test1[1:10]
test1 <- sqlc$mz
test1[1:10]
q()
