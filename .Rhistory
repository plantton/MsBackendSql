dbtable = "meta_combined",
dbkey = "pkey")
library(SQLDataFrame)
sqf_tmp <- SQLDataFrame(conn = conn_tmp,
dbtable = "meta_combined",
dbkey = "pkey")
sqf_tmp <- SQLDataFrame(conn = conn_tmp,
dbtable = 'meta_combined',
dbkey = "pkey")
conn_tmp <- dbConnect(RSQLite::SQLite(), "bench200.db")
sqf_tmp <- SQLDataFrame(conn = conn_tmp,
dbtable = 'meta_combined',
dbkey = "pkey")
object_size(sqf_tmp)
file.size("bench100.db")
object_size(conn_tmp)
234569728/ 1024^2
dbDisconnect(conn_tmp)
rm(conn_tmp)
nrow(sqf_tmp)
ncol(sqf_tmp)
q()
library(mzR)
library(RSQLite)
library(SQLDataFrame)
library(msdata)
library(peakRAM)
library(tidyverse)
library(pryr)
dbname <- create_metadata_db(f, "bench1.db")
create_metadata_db <- function(filenames, dbname) {
if (missing(dbname))
dbname <- tempfile(fileext = ".db")
if (file.exists(dbname))
stop("dbname file already exists.")
conn0 <- dbConnect(RSQLite::SQLite(), dbname)
for (i in 1:length(filenames)) {
msd <- mzR::openMSfile(filenames[i])
hdr <- mzR::header(msd)
hdr$pkey <- paste0(basename(filenames[i]), "_", i, "_", seq(nrow(hdr)))
dbWriteTable(conn0,
"meta_combined",
hdr,
append = TRUE,
row.names = FALSE,
overwrite = FALSE)
mzR::close(msd)
}
dbDisconnect(conn0)
dbname
}
dbname <- create_metadata_db(f, "bench1.db")
dbname <- create_metadata_db(f, "bench1.db")
f <- msdata::proteomics(full.names = TRUE)[4]
dbname <- create_metadata_db(f)
dbname <- create_metadata_db(f, "bench1.db")
dbname <- create_metadata_db(f, "bench1.db")
dbname
db_files <- dir(pattern = "bench.*db")
db_files <- db_files[order(as.numeric(sub("\\.db", "", sub("bench", "", db_files))))]
db_files
db_size <- sapply(db_files,
function(dbf) {
conn <- dbConnect(RSQLite::SQLite(), dbf)
on.exit(dbDisconnect(conn))
sqf <- SQLDataFrame(conn = conn,
dbtable = "meta_combined",
dbkey = "pkey")
object_size(as.data.frame(sqf)) / 1024^2
})
db_size
dbfile_size <- file.size(db_files) / 1024^2
dbfile_size
db_size <- sapply(db_files,
function(dbf) {
conn <- dbConnect(RSQLite::SQLite(), dbf)
on.exit(dbDisconnect(conn))
sqf <- SQLDataFrame(conn = conn,
dbtable = "meta_combined",
dbkey = "pkey")
object_size(sqf) / 1024^2
})
db_size
db_size <- sapply(db_files,
function(dbf) {
conn <- dbConnect(RSQLite::SQLite(), dbf)
on.exit(dbDisconnect(conn))
sqf <- SQLDataFrame(conn = conn,
dbtable = "meta_combined",
dbkey = "pkey")
object_size(as.data.frame(sqf)) / 1024^2
})
dbf_size <- sapply(db_files,
function(dbf) {
conn <- dbConnect(RSQLite::SQLite(), dbf)
on.exit(dbDisconnect(conn))
sqf <- SQLDataFrame(conn = conn,
dbtable = "meta_combined",
dbkey = "pkey")
object_size(sqf) / 1024^2
})
dbfile_size <- file.size(db_files) / 1024^2
dbf_size
db_size
dbfile_size
dfr <- data.frame(dbf_size,
db_size,
dbfile_size,
n = c(1, 10, 20, 50, 100, 200)) %>%
select(-1)
dfr
View(dfr)
dbfile_size <- file.size(db_files) / 1024^2
dbf_size <- sapply(db_files,
function(dbf) {
conn <- dbConnect(RSQLite::SQLite(), dbf)
on.exit(dbDisconnect(conn))
sqf <- SQLDataFrame(conn = conn,
dbtable = "meta_combined",
dbkey = "pkey")
object_size(sqf) / 1024^2
})
dfr <- data.frame(dbf_size,
db_size,
dbfile_size,
n = c(1, 10, 20, 50, 100, 200))
dfr
View(dfr)
ggplot(dfr,
aes(x = n, y = Elapsed_Time_sec)) +
geom_line() +
geom_point()
dfr %>%
select(n, dbf_size, db_size, dbfile_size) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n) %>%
ggplot(aes(x = n, y = value, colour = param)) +
geom_line() +
geom_point()
dfr %>%
select(n, dbf_size, db_size, dbfile_size) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n) %>%
ggplot(aes(x = n, y = value, colour = param)) +
geom_line() +
geom_point()
View(dfr)
ggplot(dfr,
aes(x = dbf_size, y = db_size)) +
geom_line() +
geom_point()
ggplot(dfr,
aes(x = dbfile_size, y = db_size)) +
geom_line() +
geom_point()
ggplot(dfr,
aes(x = dbf_size, y = db_size)) +
geom_line() +
geom_point() +
facet_grid(rows = vars(dbfile_size))
ggplot(dfr,
aes(x = dbf_size, y = db_size)) +
geom_line() +
geom_point() +
facet_grid(rows = vars(dbfile_size))
dfr %>%
select(n, dbf_size, db_size, dbfile_size) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n) %>%
ggplot(aes(x = n, y = value, colour = param)) +
geom_line() +
geom_point()
test <- dfr %>%
select(db_size, dbf_size, dbfile_size) %>%
pivot_longer(names_to = "param",
values_to = "value",
-db_size)
View(test)
dfr %>%
select(db_size, dbf_size, dbfile_size) %>%
pivot_longer(names_to = "param",
values_to = "value",
-db_size) %>%
ggplot(aes(x = vaue, y = db_size)) +
geom_abline() +
geom_point() +
facet_grid(param ~ .)
dfr %>%
select(db_size, dbf_size, dbfile_size) %>%
pivot_longer(names_to = "param",
values_to = "value",
-db_size) %>%
ggplot(aes(x = value, y = db_size)) +
geom_abline() +
geom_point() +
facet_grid(param ~ .)
dfr %>%
select(db_size, dbf_size, dbfile_size) %>%
pivot_longer(names_to = "param",
values_to = "value",
-db_size) %>%
ggplot(aes(x = value, y = db_size)) +
geom_line() +
geom_point() +
facet_grid(param ~ .)
dfr %>%
select(db_size, dbf_size, dbfile_size) %>%
pivot_longer(names_to = "param",
values_to = "value",
-db_size) %>%
ggplot(aes(x = value, y = db_size)) +
geom_line() +
geom_point() +
facet_grid(value ~ .)
dfr %>%
select(db_size, dbf_size, dbfile_size) %>%
pivot_longer(names_to = "param",
values_to = "value",
-db_size) %>%
ggplot(aes(x = value, y = db_size)) +
geom_line() +
geom_point() +
facet_grid(param ~ .)
dfr %>%
select(db_size, dbf_size, dbfile_size) %>%
pivot_longer(names_to = "param",
values_to = "value",
-db_size) %>%
ggplot(aes(x = value, y = db_size)) +
geom_line() +
geom_point() +
facet_grid(cols = vars(param))
dfr %>%
select(db_size, dbf_size, dbfile_size) %>%
pivot_longer(names_to = "param",
values_to = "value",
-db_size) %>%
ggplot(aes(x = value, y = db_size)) +
geom_line() +
geom_point() +
facet_grid(cols = vars(param), scales = "free")
dfr
dfr %>%
select(db_size, dbf_size, dbfile_size) %>%
pivot_longer(names_to = "param",
values_to = "value",
-db_size) %>%
ggplot(aes(x = value, y = db_size, colour = param)) +
geom_line() +
geom_point() +
facet_grid(cols = vars(param), scales = "free")
dfr %>%
select(n, dbf_size, db_size, dbfile_size) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n) %>%
ggplot(aes(x = n, y = value, colour = param)) +
geom_line() +
geom_point()
sp <- ggplot(dfr, aes(dbf_size, db_size, colour = red)) +
geom_line() +
geom_point()
reg <- lm(db_size ~ dbf_size, data = dfr)
coeff <- coefficients(reg)
eq <- paste0("y = ", round(coeff[2], 2), "*x  ", round(coeff[1], 2))
sp <- ggplot(dfr, aes(dbf_size, db_size, colour = red)) +
geom_line() +
geom_point()
reg <- lm(db_size ~ dbf_size, data = dfr)
coeff <- coefficients(reg)
eq <- paste0("y = ", round(coeff[2], 2), "*x  ", round(coeff[1], 2))
sp
sp <- ggplot(dfr, aes(dbf_size, db_size, colour = "red")) +
geom_line() +
geom_point()
sp
reg <- lm(db_size ~ dbf_size, data = dfr)
reg
coeff <- coefficients(reg)
coeff
eq <- paste0("y = ", round(coeff[2], 2), "*x  ", round(coeff[1], 2))
e
eeq
eq
round(coeff[2], 2)
round(coeff[1], 2)
sp + geom_abline(intercept = round(coeff[1], 2),
slope = round(coeff[2], 2),
color="purple",
linetype="dashed",
size=0.5)+
ggtitle(eq)
sp <- ggplot(dfr, aes(dbfile_size, db_size, colour = "red")) +
geom_line() +
geom_point()
reg <- lm(db_size ~ dbfile_size, data = dfr)
coeff <- coefficients(reg)
eq <- paste0("y = ", round(coeff[2], 2), "*x  ", round(coeff[1], 2))
sp + geom_abline(intercept = round(coeff[1], 2),
slope = round(coeff[2], 2),
color="purple",
linetype="dashed",
size=0.5)+
ggtitle(eq)
?lm
file.size(bench200.db)
file.size("bench200.db")
1073741824 / 1024^2
1073741824 / 1024
1048576 / 1024
1073741824 / 1024^3
dbfile_ccle_size
round(coeff[2], 2)
sp <- ggplot(dfr, aes(dbfile_size, db_size, colour = "red")) +
geom_line() +
geom_point()
reg <- lm(db_size ~ dbfile_size, data = dfr)
coeff <- coefficients(reg)
eq <- paste0("y = ", round(coeff[2], 2), "*x  ", round(coeff[1], 2))
sp + geom_abline(intercept = round(coeff[1], 2),
slope = round(coeff[2], 2),
color="purple",
linetype="dashed",
size=0.5)+
ggtitle(eq)
reg
sp <- ggplot(dfr, aes(dbfile_size, db_size, colour = "red")) +
geom_line() +
geom_point()
reg <- lm(db_size ~ dbfile_size, data = dfr)
coeff <- coefficients(reg)
eq <- paste0("y = ", round(coeff[2], 2), "*x  +", round(coeff[1], 2))
sp + geom_abline(intercept = round(coeff[1], 2),
slope = round(coeff[2], 2),
color="purple",
linetype="dashed",
size=0.5)+
ggtitle(eq)
sp <- ggplot(dfr, aes(dbfile_size, db_size, colour = "red")) +
geom_line() +
geom_point()
reg <- lm(db_size ~ dbfile_size, data = dfr)
coeff <- coefficients(reg)
eq <- paste0("y = ", round(coeff[2], 2), "*x  + ", round(coeff[1], 2))
sp + geom_abline(intercept = round(coeff[1], 2),
slope = round(coeff[2], 2),
color="purple",
linetype="dashed",
size=0.5)+
ggtitle(eq)
coeff[2], 2)
round(coeff[2], 2)
round(coeff[1], 2)
dbfile_ccle_size <- (file.size("bench200.db") / 1024^3)
meta_ccle_size <- round(coeff[2], 2)*dbfile_ccle_size +
round(coeff[1], 2)
meta_ccle_size
file.size("bench200.db")
dbfile_ccle_size
0.4369545*1.23 + 1.22
conn200 <- dbConnect(RSQLite::SQLite(), "bench200.db")
dbListTables(conn200)
test <- dbReadTable(conn200, "meta_combined")
object_size(test)
object.size(test)
dbfile_ccle_size <- (file.size("bench200.db") / 1024^2)
meta_ccle_size <- round(coeff[2], 2)*dbfile_ccle_size +
round(coeff[1], 2)
meta_ccle_size
dbfile_ccle_size <- file.size("bench200.db")
meta_ccle_size <- round(coeff[2], 2)*dbfile_ccle_size +
round(coeff[1], 2)
meta_ccle_size / 1024^2
dfr %>%
select(n, dbf_size, db_size, dbfile_size) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n) %>%
ggplot(aes(x = n, y = value, colour = param)) +
geom_line() +
geom_point()
db_files <- dir(pattern = "bench.*db")
db_files
db_files <- dir(pattern = "bench.*db")
db_files
db_files <- dir(pattern = "bench.*db")
db_files
q()
set.seed(1)
x <- DataFrame(X = sample(LETTERS, 1000, replace = TRUE), Y = rnorm(1000), Z = runif(1000))
x
library(S4Vectors)
library(SQLDataFrame)
library(RSQLite)
set.seed(1)
x <- DataFrame(X = sample(LETTERS, 1000, replace = TRUE), Y = rnorm(1000), Z = runif(1000))
x
dim(x)
x$X
nrow(x$X)
length(x$X)
?tapply
?setValidity
?setClass
?prototype
?setValidity
q()
?setMethod
call(rnow)
call(nrow)
call("nrow")
library(S4Vectors)
library(SQLDataFrame)
library(RSQLite)
library(methods)
library(S4Vectors)
library(SQLDataFrame)
library(RSQLite)
library(methods)
library(Spectra)
selectMethod("split", "MsBackendDataFrame")
methods("split")
seq_along()
?seq_along
seq_along(1:10)
seq_along(20:30)
seq_along(21:30)
?split
x <- Rle(101:105, 6:2)
x
split(x, c("B", "B", "A", "B", "A"))
groups <- c("group1", "group2")
DF <- DataFrame(
a=letters[1:10],
i=101:110,
group=rep(factor(groups, levels=groups), c(3, 7))
)
DF
split(DF, DF$group)
test <- split(DF, DF$group)
class(test)
dim(test)
test <- lapply(split(seq_along(DF), DF$group, ...), function(i) x[i, ])
test <- lapply(split(seq_along(DF), DF$group), function(i) x[i, ])
dim(test)
test
test <- lapply(split(seq_along(DF), DF$group), function(i) DF[i, ])
test
bench_split <- function(metaDF, grp) {
if (!is.factor(label))
label <- as.factor(label)
lapply(split(seq_along(metaDF), label), function(i) x[i, ])
}
conn <- dbConnect(RSQLite::SQLite(), "bench200.db")
sqf <- SQLDataFrame(conn = conn,
dbtable = "meta_combined",
dbkey = "pkey")
sqf
str(sqf)
length(sqf$acquisitionNum)
table( sqf$msLevel)
tapply(sqf, sqf$msLevel, function(xx) mean(xx$scanWindowUpperLimit))
tapply(sqf, sqf$msLevel, length)
tapply(sqf, sqf$msLevel, "length")
set.seed(1)
x <- DataFrame(X = sample(LETTERS, 1000, replace = TRUE), Y = rnorm(1000), Z = runif(1000))
x
dim(x)
tapply(x, x$X, function(xx) mean(xx$Y))
table(x$X)
tapply(sqf$highMZ, sqf$msLevel, length)
tapply(sqf$highMZ, sqf$msLevel, mean)
indexes()
indexes(sqf)
library(SQLDataFrame)
?indexes
slotNames(sqf)
dbkey(sqf)
dbtable(sqf)
?lapply
test <- seq_along(sqf)
split(seq_along(sqf), msLevel)
sqf@indexes
test1 <- sqf$msLevel
setwd("/media/chongtang/Windows/Users/tangc/Documents/rformassspectrometry/MsBackendSqlDIR/MsBackendSql/inst/ext/vignette/")
.libPaths()
tempdir()
install_github("rformassspectrometry/Spectra")
library(devtools)
install_github("rformassspectrometry/Spectra")
install_github("rformassspectrometry/Spectra")
install_github("rformassspectrometry/Spectra")
install_github("rformassspectrometry/MsBackendSql")
setwd("/media/chongtang/Windows/Users/tangc/Documents/rformassspectrometry/MsBackendSqlDIR/MsBackendSql")
devtools::document()
install_github("rformassspectrometry/Spectra")
library(Spectra)
devtools::document()
sessionInfo()
packageVersion("Spectra")
q()
packageVersion("Spectra")
devtools::document()
devtools::document()
devtools::build()
devtools::check()
library(MsBackendSql)
?backendInitialize
q()
