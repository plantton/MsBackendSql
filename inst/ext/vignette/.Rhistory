library(tidyverse)
library(pryr)
conn1 <- dbConnect(RSQLite::SQLite(), "bench1.db")
test3 <- MsBackendSql::backendInitialize(MsBackendSqlDb(), conn1,files = f)
f <- msdata::proteomics(full.names = TRUE)[4]
test3 <- MsBackendSql::backendInitialize(MsBackendSqlDb(), conn1,files = f)
create_metadata_db <- function(filenames, dbname) {
if (missing(dbname))
dbname <- tempfile(fileext = ".db")
if (file.exists(dbname))
stop("dbname file already exists.")
conn0 <- dbConnect(RSQLite::SQLite(), dbname)
for (i in 1:length(filenames)) {
msd <- mzR::openMSfile(filenames[i])
hdr <- mzR::header(msd)
hdr$pkey <- paste0(basename(filenames[i]), "_", i, "_", seq(nrow(hdr)))
dbWriteTable(conn0,
"meta_combined",
hdr,
append = TRUE,
row.names = FALSE,
overwrite = FALSE)
mzR::close(msd)
}
dbDisconnect(conn0)
dbname
}
testname <- create_metadata_db(f, "test.db")
library(msdata)
library(RSQLite)
con <- dbConnect(SQLite(), tempfile())
getwd()
fls <- dir(system.file("sciex", package = "msdata"), full.names = TRUE, pattern = "mzML$")
fls
msb <- backendInitialize(MsBackendSqlDb(), dbcon = con, files = fls)
f <- msdata::proteomics(full.names = TRUE)[4]
f
b1 <- Spectra::backendInitialize(MsBackendMzR(), files = fls)
b1 <- Spectra::backendInitialize(MsBackendMzR(), files = f)
b2 <- Spectra::backendInitialize(MsBackendDataFrame(), files = f)
b2
b2 <- setBackend(b1, MsBackendDataFrame())
f <- msdata::proteomics(full.names = TRUE)[4]
sps_tmt <-  Spectra(f, backend = MsBackendMzR())
sps_tmt
b2 <- Spectra::backendInitialize(MsBackendMzR(), files = f)
b2
dim(b2)
object_size(b2)
object_size(sps_tmt)
b3 <- setBackend(sps_tmt, MsBackendDataFrame())
b3
object_size(b3)
b2 <- Spectra::backendInitialize(MsBackendMzR(), files = f)
b3 <- setBackend(sps_tmt, MsBackendDataFrame())
object_size(b2)
object_size(b3)
conn1 <- dbConnect(SQLite(), "b1.db")
b1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
conn1 <- dbConnect(SQLite(), "b1.db")
b1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
fls  <-  rep(f, 10)
test <- Spectra::backendInitialize(MsBackendMzR(), files = fls)
object_size(test)
rm(test)
fls
test1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = fls)
conn1 <- dbConnect(SQLite(), "b1.db")
test1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = fls)
fls
rep(f,10)
conn1 <- dbConnect(SQLite(), "bench1.db")
sqlb1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
object_size(sqlb1)
conn10 <- dbConnect(SQLite(), "bench10.db")
sqlb10 <- backendInitialize(MsBackendSqlDb(), dbcon = conn10, rep(f, 10))
q()
library(MsBackendSql)
library(Spectra)
library(mzR)
library(RSQLite)
library(msdata)
library(peakRAM)
library(tidyverse)
library(pryr)
conn1 <- dbConnect(SQLite(), "b1.db")
b1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
f <- msdata::proteomics(full.names = TRUE)[4]
conn1 <- dbConnect(SQLite(), "b1.db")
b1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
sps_tmt <-  Spectra(f, backend = MsBackendMzR())
sps_tmt
b2 <- Spectra::backendInitialize(MsBackendMzR(), files = f)
b3 <- setBackend(sps_tmt, MsBackendDataFrame())
object_size(b2)
object_size(b3)
library(MsBackendSql)
library(Spectra)
library(mzR)
library(RSQLite)
library(msdata)
library(peakRAM)
library(tidyverse)
library(pryr)
f <- msdata::proteomics(full.names = TRUE)[4]
conn1 <- dbConnect(SQLite(), "b1.db")
b1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
dbListTables('b1.db')
dbListTables(conn1)
test <- dbReadTable(conn1, 'msdata')
object_size(test)
rm(test)
con <- dbConnect(SQLite(), tempfile())
fls <- dir(system.file("sciex", package = "msdata"), full.names = TRUE, pattern = "mzML$")
msb <- backendInitialize(MsBackendSqlDb(), dbcon = con, files = fls)
msb$modCount
class(msb)
slot(msb)
str(msb)
library(devtools)
install_github("rformassspectrometry/MsBackendSql")
is(msb)
is(msb, "MsBackendSqlDb")
msb2 <- MsBackendSqlDb(dbcon = con, files = fls)
?dbcon = con, files = fls
?MsBackendSqlDb
MsBackendSqlDb(dbcon = con, files = fls)
MsBackendSqlDb()
validObject(msb)
methods("MsBackendSqlDb")
methods("backendInitialize")
methods("MsBackendSqlDb")
MsBackendSqlDb(dbcon = con, files = fls, "msdata")
conn1 <- dbConnect(SQLite(), "b1.db")
b1 <- backendInitialize(MsBackendSqlDb(), files = f)
Spectra:::.mzR_header
library(MsBackendSql)
library(Spectra)
library(mzR)
library(RSQLite)
library(msdata)
library(peakRAM)
library(tidyverse)
library(pryr)
f <- msdata::proteomics(full.names = TRUE)[4]
conn1 <- dbConnect(SQLite(), "b1.db")
b1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
sps_tmt <-  Spectra(f, backend = MsBackendMzR())
sps_tmt
b2 <- Spectra::backendInitialize(MsBackendMzR(), files = f)
object_size(b2)
f <- msdata::proteomics(full.names = TRUE)[4]
conn1 <- dbConnect(SQLite(), "b1.db")
b1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
f <- msdata::proteomics(full.names = TRUE)[4]
conn1 <- dbConnect(SQLite(), "b1.db")
b1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
object_size(b1)
conn1 <- dbConnect(SQLite(), "bench1.db")
peakram1 <- peakRAM(sqlb1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f))
q()
library(devtools)
library(S4Vectors)
?vapply1l
library(DBI)
library(RSQLite)
?dbBind
?dbFetch
?dbClearResult
getwd()
f <- msdata::proteomics(full.names = TRUE)[4]
b2 <- Spectra(f, backend = MsBackendMzR())
library(MsBackendSql)
library(Spectra)
library(mzR)
library(RSQLite)
library(msdata)
library(peakRAM)
library(tidyverse)
library(pryr)
b2 <- Spectra(f, backend = MsBackendMzR())
b2
b2 <- Spectra(f, backend = MsBackendMzR())
b2 <- setBackend(b2, MsBackendDataFrame())
b2
object_size(b2)
names(b2)
rm(b2)
b2 <- Spectra::backendInitialize(MsBackendMzR(), files = f)
b2 <- setBackend(b2, MsBackendDataFrame())
b2 <- Spectra::backendInitialize(MsBackendMzR(), files = f)
b2 <- Spectra::backendInitialize(MsBackendDataFrame(), files = f)
b2
b2 <- Spectra(f, backend = MsBackendMzR())
b2 <- setBackend(b2, MsBackendDataFrame())
b2
?spectraData
test <- intensity(b2)
length(test)
test
rm(test)
test <- rtime(b2)
test
mz(b2)
test <- mz(b2)
test1 <- spectraData(b2)
test1[1:3,4:6]
integer()
?integer
integer(3)
?msLevel
msLevel(b2)
test3 <- msLevel(b2)
table(test3)
names(test1)
library(MsCoreUtils)
?MsCoreUtils::vapply1l
?dbSendQuery
?dbBind
dbFetch
dbFetch?dbFetch
?dbFetch
?vapply1l
?which
#' data types of spectraData columns
#'
#' @noRd
.SPECTRA_DATA_COLUMNS <- c(
msLevel = "integer",
rtime = "numeric",
acquisitionNum = "integer",
scanIndex = "integer",
mz = "NumericList",
intensity = "NumericList",
dataStorage = "character",
dataOrigin = "character",
centroided = "logical",
smoothed = "logical",
polarity = "integer",
precScanNum = "integer",
precursorMz = "numeric",
precursorIntensity = "numeric",
precursorCharge = "integer",
collisionEnergy = "numeric",
isolationWindowLowerMz = "numeric",
isolationWindowTargetMz = "numeric",
isolationWindowUpperMz = "numeric"
)
names(.SPECTRA_DATA_COLUMNS)
names(spectraData(f))
names(spectraData(b1))
f <- msdata::proteomics(full.names = TRUE)[4]
b2 <- Spectra(f, backend = MsBackendMzR())
names(spectraData(b2))
str(spectraData(b2))
getwd()
rm(list=ls())
load("peakRAM.rda")
library(peakRAM)
load("peakRAM.rda")
load("peakRAM_SQL.rda")
rm(list=ls())
load("peakRAM_SQL.rda")
dfr <- data.frame(rbind(peakram1, peakram10, peakram20,
peakram50, peakram100, peakram200),
db_size,
dbfile_size,
n = c(1, 10, 20, 50, 100, 200)) %>%
select(-1)
peakram1
conn1 <- dbConnect(SQLite(), "bench1.db")
f <- msdata::proteomics(full.names = TRUE)[4]
sqlb1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
db_files <- dir(pattern = "bench.*db")
db_files <- db_files[order(as.numeric(sub("\\.db", "", sub("bench", "", db_files))))]
db_files
conn <- dbConnect(RSQLite::SQLite(), "bench1.db")
test <- dbReadTable(conn, 'msdata')
object_size(test)
class(test)
q()
q()
library(MsBackendSql)
library(Spectra)
library(mzR)
library(RSQLite)
library(msdata)
library(peakRAM)
library(tidyverse)
library(pryr)
load("peakRAM_SQL.rda")
res1
dim(res1)
res1[[1]]
library(dplyr)
ram_records <- res1 %>% bind_rows(.)
ram_records
drf
dfr
peakram1
rbind(peakram1, peakram10, peakram20,
peakram50, peakram100, peakram200)
rep(c(1, 10, 20, 50, 100, 200))
rep(c(1, 10, 20, 50, 100, 200), 2)
dim(ram_records)
ram_records <- res1 %>% bind_rows(.)
dfr1 <- data.frame(rbind(peakram1, peakram10, peakram20,
peakram50, peakram100, peakram200,
ram_records),
backend = c(rep("MsBackendSqlDb", 6),
rep("MsBackendMzR", 6)),
n = rep(c(1, 10, 20, 50, 100, 200), 2)) %>%
select(-1)
dfr1
dfr1 %>%
select(n, Elapsed_Time_sec, Peak_RAM_Used_MiB,
Total_RAM_Used_MiB, backend) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n) %>%
ggplot(aes(x = n, y = value, colour = param)) +
geom_line() +
geom_point()
dfr1 %>%
select(n, Elapsed_Time_sec, Peak_RAM_Used_MiB,
Total_RAM_Used_MiB, backend) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n)
dfr1 %>%
select(n, Elapsed_Time_sec, Peak_RAM_Used_MiB,
Total_RAM_Used_MiB, backend)
?starts_with
rbind(peakram1, peakram10, peakram20,
peakram50, peakram100, peakram200)
ram_records
ram_records[-1]
dfr1 <- data.frame(rbind(peakram1, peakram10, peakram20,
peakram50, peakram100, peakram200),
ram_records[-1],
n = c(1, 10, 20, 50, 100, 200)) %>%
select(-1)
dfr1
ram_records[-1]
dfr1 %>%
pivot_longer(everything(),
names_to = c(".value", "set"),
names_pattern = "(.)(.)"
)
dfr1 <- data.frame(rbind(peakram1, peakram10, peakram20,
peakram50, peakram100, peakram200),
ram_records[-1],
n = c(1, 10, 20, 50, 100, 200),
n.1 = c(1, 10, 20, 50, 100, 200)) %>%
select(-1)
dfr1
dfr1 %>%
pivot_longer(everything(),
names_to = c(".value", "set"),
names_pattern = "(.)(.)"
)
dfr1 <- data.frame(rbind(peakram1, peakram10, peakram20,
peakram50, peakram100, peakram200),
n = c(1, 10, 20, 50, 100, 200),
ram_records[-1],
n.1 = c(1, 10, 20, 50, 100, 200)) %>%
select(-1)
dfr1
names(dfr1) <- c("Elapsed_Time_sec1", "Total_RAM_Used_MiB1", "Peak_RAM_Used_MiB1", "n1", "Elapsed_Time_sec2", "Total_RAM_Used_MiB2", "Peak_RAM_Used_MiB2", "n2")
dfr1
names(dfr1) <- c("Elapsed_Time_sec1", "Total_RAM_Used_MiB1", "Peak_RAM_Used_MiB1", "n1", "SQL_Elapsed_Time_sec2", "SQL_Total_RAM_Used_MiB2", "SQL_Peak_RAM_Used_MiB2", "SQL_n2")
dfr1
dfr1 %>%
pivot_longer(everything(),
names_to = c(".value", "set"),
names_pattern = "(.)(.)"
)
dfr1 %>%
pivot_longer(everything(),
names_to = c(".value", "set")
)
rbind(peakram1, peakram10, peakram20,
peakram50, peakram100, peakram200)
ram_records[-1]
dfr1 <- data.frame(rbind(peakram1, peakram10, peakram20,
peakram50, peakram100, peakram200),
ram_records[-1],
n = c(1, 10, 20, 50, 100, 200)) %>%
select(-1)
dfr1
dfr1 %>%
select(n, Elapsed_Time_sec, Elapsed_Time_sec.1) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n) %>%
ggplot(aes(x = n, y = value, colour = param)) +
geom_line() +
geom_point()
?dplyr::select
ram_records[-1]
dfr1
peakram1
peakram2
peakram20
peakram10
plot1 <- dfr1 %>%
select(n, Elapsed_Time_sec_SQL = Elapsed_Time_sec,
Elapsed_Time_sec_mzR = Elapsed_Time_sec.1) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n) %>%
ggplot(aes(x = n, y = value, colour = param)) +
geom_line() +
geom_point()
plot1
dfr1
plot2 <- dfr1 %>%
select(n, Total_RAM_Used_MiB_SQL = Total_RAM_Used_MiB,
Total_RAM_Used_MiB_mzR = Total_RAM_Used_MiB.1) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n) %>%
ggplot(aes(x = n, y = value, colour = param)) +
geom_line() +
geom_point()
plot2
dfr1
plot3 <- dfr1 %>%
select(n, Peak_RAM_Used_MiB_SQL = Peak_RAM_Used_MiB,
Peak_RAM_Used_MiB_mzR = Peak_RAM_Used_MiB.1) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n) %>%
ggplot(aes(x = n, y = value, colour = param)) +
geom_line() +
geom_point()
plot3
dfr1
plot1 + facet_wrap(~ n)
plot2 + facet_wrap(~ n, ncol=2)
plot3 + facet_wrap(~ n, ncol=3)
plot1
plot2
plot3
dfr1
res1
peakram200
dfr1 %>%
select(n, Elapsed_Time_sec_SQL = Elapsed_Time_sec,
Elapsed_Time_sec_mzR = Elapsed_Time_sec.1) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n) %>%
ggplot(aes(x = n, y = value, colour = param)) +
geom_line() +
geom_point()
dfr1 %>%
select(n, Total_RAM_Used_MiB_SQL = Total_RAM_Used_MiB,
Total_RAM_Used_MiB_mzR = Total_RAM_Used_MiB.1) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n) %>%
ggplot(aes(x = n, y = value, colour = param)) +
geom_line() +
geom_point()
dfr1 %>%
select(n, Elapsed_Time_sec_SQL = Elapsed_Time_sec,
Elapsed_Time_sec_mzR = Elapsed_Time_sec.1) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n) %>%
ggplot(aes(x = n, y = value, colour = param)) +
geom_line() +
geom_point()
dfr1 %>%
select(n, Peak_RAM_Used_MiB_SQL = Peak_RAM_Used_MiB,
Peak_RAM_Used_MiB_mzR = Peak_RAM_Used_MiB.1) %>%
pivot_longer(names_to = "param",
values_to = "value",
-n) %>%
ggplot(aes(x = n, y = value, colour = param)) +
geom_line() +
geom_point()
peakram1
conn1 <- dbConnect(SQLite(), "b1.db")
b1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
library(MsBackendSql)
library(Spectra)
library(mzR)
library(RSQLite)
library(msdata)
library(peakRAM)
library(tidyverse)
library(pryr)
f <- msdata::proteomics(full.names = TRUE)[4]
conn1 <- dbConnect(SQLite(), "b1.db")
b1 <- backendInitialize(MsBackendSqlDb(), dbcon = conn1, files = f)
db_files <- dir(pattern = "bench.*db")
db_files <- db_files[order(as.numeric(sub("\\.db", "", sub("bench", "", db_files))))]
dbfile_size <- file.size(db_files) / 1024^2
dbfile_size
getwd()
db_files <- dir(pattern = "bench.*db")
db_files <- db_files[order(as.numeric(sub("\\.db", "", sub("bench", "", db_files))))]
dbfile_size <- file.size(db_files) / 1024^2
dbfile_size
db_files <- dir(pattern = "bench.*db")
db_files <- db_files[order(as.numeric(sub("\\.db", "", sub("bench", "", db_files))))]
dbfile_size <- file.size(db_files) / 1024^2
dbfile_size
q()
q()
